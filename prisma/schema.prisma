datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int      @id @default(autoincrement())
  fullName    String
  email       String   @unique
  phoneNumber String   @unique
  gender      String?
  city        String?
  birthday    String?
  password    String
  notes       Notes[]
  role        String   @default("user")
  createdAt   DateTime @default(now())
}

model PhoneCode {
  id          Int      @id @default(autoincrement())
  phoneNumber String   @unique
  code        String
  createdAt   DateTime @default(now())
}

model Library {
  id       Int    @id @default(autoincrement())
  name     String @unique
  items    Item[]
  photoUrl String
}

model File {
  id        Int      @id @default(autoincrement())
  fileName  String
  fileUrl   String
  createdAt DateTime @default(now())
}

model Sms {
  id          Int      @id @default(autoincrement())
  name        String
  surname     String
  phoneNumber String
  sms         String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Item {
  id        Int      @id @default(autoincrement())
  title     String
  subtitle  String
  author    String
  price     Int // for balls
  length    Int
  type      String
  fileUrl   String
  libraryId Int
  photoUrl  String?
  createdAt DateTime @default(now())
  Library   Library  @relation(fields: [libraryId], references: [id])
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  photoUrl    String
  mainUrl     String?
  createdAt   DateTime @default(now())
}

model Notes {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  userId      Int
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
}

model Courses {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String
  author      String
  time        String
  photoUrls   String[]
  modules     Modules[]
  createdAt   DateTime  @default(now())
}

model Modules {
  id        Int       @id @default(autoincrement())
  Course    Courses   @relation(fields: [courseId], references: [id])
  title     String
  videoUrl  String
  time      String
  courseId  Int
  Lessons   Lessons[]
  createdAt DateTime  @default(now())
}

model Lessons {
  id        Int      @id @default(autoincrement())
  title     String
  videoUrl  String
  time      String
  test      Test[]
  moduleId  Int
  Modules   Modules  @relation(fields: [moduleId], references: [id])
  createdAt DateTime @default(now())
}

model Test {
  id        Int         @id @default(autoincrement())
  title     String
  questions Questions[]
  createdAt DateTime    @default(now())
  Lessons   Lessons?    @relation(fields: [lessonsId], references: [id])
  lessonsId Int?
}

model Questions {
  id        Int       @id @default(autoincrement())
  title     String
  answers   Answers[]
  testId    Int
  Test      Test      @relation(fields: [testId], references: [id])
  createdAt DateTime  @default(now())
}

model Answers {
  id         Int       @id @default(autoincrement())
  title      String
  isCorrect  Boolean
  questionId Int
  Questions  Questions @relation(fields: [questionId], references: [id])
  createdAt  DateTime  @default(now())
}
